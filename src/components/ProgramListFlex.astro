---
import { Icon } from "astro-icon";
import type { TimeRecord } from "../models/airtable";
import { groupBy } from "../util/groupUtil";
import {
  getRoomName,
  getRowAndCol,
  getImageUrl,
  getNiceType,
  uniqueFilter,
} from "../util/util";
import EventCard from "./EventCard/EventCard.astro";
import EventCardHeader from "./EventCard/EventCardHeader.svelte";

export interface Props {
  relevantSlots: TimeRecord[];
}

function roomValue(room: string) {
  switch (room) {
    case "SDP":
      return 4;
    case "SLO":
      return 3;
    case "SOA":
      return 2;
    case "SPDR":
      return 1;
    case "SC":
      return 4;
    default:
      return 0;
  }
}

function getTimeSpanAmount(slot: TimeRecord, otherSlots: TimeRecord[]) {
  const dividedByRoom = divideByRoom(otherSlots);
  return dividedByRoom
    .filter((value) => value.room !== slot.fields.room)
    .map((value) => {
      return {
        room: value.room,
        rowSpan: value.slots.filter(
          (timeSlot) =>
            timeBeforeTime(timeSlot.fields.start, slot.fields.end) &&
            timeBeforeTime(slot.fields.start, timeSlot.fields.start) &&
            !(
              timeSlot.fields.start === slot.fields.start &&
              timeSlot.fields.end === slot.fields.end
            )
        ).length,
      };
    });
}

function getTimeSpanLi(
  room: string,
  calc: { room: string; rowSpan: number }[]
) {
  const classes = [
    [
      "",
      "white-space-room-1-2",
      "white-space-room-1-3",
      "white-space-room-1-4",
    ],
    [
      "white-space-room-2-1",
      "",
      "white-space-room-2-3",
      "white-space-room-2-4",
    ],
    [
      "white-space-room-3-1",
      "white-space-room-3-2",
      "",
      "white-space-room-3-4",
    ],
    [
      "white-space-room-4-1",
      "white-space-room-4-2",
      "white-space-room-4-3",
      "",
    ],
  ];

  const arr: string[][] = [];
  const numberRoom = roomValue(room) - 1;

  calc.forEach((value, index) => {
    for (let index = 0; index < value.rowSpan; index++) {
      arr[index] =
        arr[index] != null
          ? [...arr[index], classes[numberRoom][roomValue(value.room) - 1]]
          : [classes[numberRoom][roomValue(value.room) - 1]];
    }
  });

  return arr;
}

function getBuffer(slot: TimeRecord, otherSlots: TimeRecord[]) {
  const v = getTimeSpanAmount(slot, otherSlots);

  if (v != null) {
    return getTimeSpanLi(slot.fields.room, v);
  }
  return [];
}

function timeBeforeTime(start: string, end: string) {
  const startDateTime = new Date(
    2022,
    9,
    21,
    Number(start.split(":")[0]),
    Number(start.split(":")[1])
  );
  const endDateTime = new Date(
    2022,
    9,
    21,
    Number(end.split(":")[0]),
    Number(end.split(":")[1])
  );

  return startDateTime < endDateTime;
}

function divideByRoom(slots: TimeRecord[]) {
  const roomDividedSlots = groupBy(slots, (value) => value.fields.room);

  return Object.keys(roomDividedSlots)
    .map((key) => {
      return { room: key, slots: roomDividedSlots[key] };
    })
    .sort((a, b) => (roomValue(a.room) < roomValue(b.room) ? 1 : -1));
}

const { relevantSlots } = Astro.props;
---

<div>
  <div
    id="spcontainer"
    class="snap-x snap-mandatory sp grid grid-container lg:grid-cols-4 lg:gap-x-6 grid-rows-[1fr,_auto] overflow-auto max-h-screen lg:max-h-full"
  >
    {
      divideByRoom(relevantSlots).map((room, index) => {
        return (
          <ul
            class={`pt-4 flex flex-col w-full h-full lg:pr-0 snap-center px-2 R${
              index + 1
            }`}
          >
            <li class="roomHeader  sticky w-full border-b-2 border-b-kleather flex flex-row justify-between lg:block top-0 bg-ksand">
              {index != 0 ? (
                <button class={`scrollToPrev R${index + 1}-${index}`}>
                  <Icon
                    class="h-6 w-6 inline-block my-auto"
                    pack="ant-design"
                    name="caret-left-filled"
                  />
                  <span class="inline-block my-auto align-middle">
                    {"R" + index}
                  </span>
                </button>
              ) : (
                ""
              )}
              <h2 class="text-kleather text-center w-fit mx-auto lg:text-left py-1 font-bold">
                <span class={`lg:hidden`}>{"R" + (index + 1)}</span>
                {getRoomName(room.room)}
              </h2>
              {index != 3 ? (
                <button class={`scrollToNext R${index + 1}-${index + 2}`}>
                  <span class="inline-block my-auto align-middle">
                    {"R" + (index + 2)}
                  </span>
                  <Icon
                    class="h-6 w-6 inline-block my-auto"
                    pack="ant-design"
                    name="caret-right-filled"
                  />
                </button>
              ) : (
                ""
              )}
            </li>
            {room.slots.map((slot) => {
              return (
                <>
                  <li class="h-52 w-11/12 mx-auto lg:hover:border-klollipop border border-transparent">
                    <EventCard data={slot} className={""}>
                      <EventCardHeader
                        slot="favorite"
                        client:load
                        data={slot}
                      />
                    </EventCard>
                  </li>
                  {getBuffer(slot, relevantSlots).map((value) => {
                    return (
                      <li class:list={[value, "whitespace-class h-52"]}>
                        <div class="mx-auto h-full w-[3px] bg-kleather whitediv" />
                      </li>
                    );
                  })}
                </>
              );
            })}
          </ul>
        );
      })
    }
  </div>
</div>

<script>
  const container = document.querySelector("#spcontainer");
  const R = document.querySelector(".R1");
  const RSize = R != null ? R.clientWidth : 0;

  document.querySelectorAll(".scrollToPrev").forEach((v) => {
    v.addEventListener("click", scrollToPrev);
    v.addEventListener("touch", scrollToPrev);
  });
  document.querySelectorAll(".scrollToNext").forEach((v) => {
    v.addEventListener("click", scrollToNext);
    v.addEventListener("touch", scrollToNext);
  });

  function scrollToPrev() {
    var x = window.matchMedia("(max-width: 768px)");
    if (container != null) {
      if (x.matches) {
        container.scrollBy(-RSize, 0);
      } else {
        container.scrollBy(-container.clientWidth, 0);
      }
    }
  }
  function scrollToNext() {
    var x = window.matchMedia("(max-width: 768px)");

    if (container != null) {
      if (x.matches) {
        container.scrollBy(RSize, 0);
      } else {
        container.scrollBy(container.clientWidth, 0);
      }
    }
  }
</script>

<style>
  button {
    @apply lg:hidden;
  }

  @media (max-width: 768px) {
    .event {
      max-width: 30rem;
      width: 100%;
    }
    .timeList {
      row-gap: 1.5rem;
    }
  }

  .whitespace-class {
    display: none;
  }

  .grid-container {
    grid-template-columns: repeat(4, 100%);
  }

  @media (min-width: 768px) {
    .grid-container {
      grid-template-columns: repeat(4, 50%);
    }
    .white-space-room-1-2,
    .white-space-room-2-1,
    .white-space-room-3-4,
    .white-space-room-4-3 {
      @apply block;
    }

    .R1-2,
    .R2-1,
    .R3-4,
    .R4-3 {
      display: none;
    }
  }

  @media (min-width: 1024px) {
    .whitespace-class {
      @apply block;
    }

    .sp {
      @apply overflow-auto;
    }
    .timeList {
      row-gap: 2.5rem;
    }
    .grid-container {
      @apply grid-cols-4;
    }
  }

  .sp {
    @apply lg:overflow-visible;
  }

  .whitespace-class {
    @apply pb-4 lg:pb-0;
  }
  .whitediv {
    @apply lg:bg-transparent lg:border-dotted lg:border-l-[3px] lg:border-l-kleather lg:w-5/6;
  }

  .roomHeader {
    @apply lg:top-[4rem];
  }
</style>
